#!/bin/bash
# program for calculate statistic

#echo "Hello World"
#myname="Aldiansyah Suryoutomo"
#echo $myname

#initiate parameter or variable whether the program succeed or not
success=0
fail=1

#message that will reveal if any error from user command line
error (){
	echo "$0 {-rows|-cols} [file]"
}

#check whether the input file is readable or not
if [[ ! -r $2 && ! -z $2 ]];
then
	echo "$0: cannot read $2" 1>&2
	exit $fail
fi

#check if the command or argument is too long
if [[ $# > 2 ]];
then
	error
	exit $fail
fi

#argument to calculate rows number, begin with -r argument
if [[ $1 == -r* ]];
then
	echo -e "Average\tMedian"
	while read myfile
	do
		#initialization variable before calculate average
		sum=0
		count=0
		ave=0
		#variable that keep convertion line
		#change newline into spaces and vice versa also sort the line numeric 
		sort_myfile=$(echo "$myfile" | expand | tr ' ' '\n' | sed '/^$/d' | sort -n | tr '\n' ' ')
		#create an array from the number above
		array=($sort_myfile)
		#get the length of the array
		len=${#array[@]}
		#get the center part of the array
		mid=$(expr $len / 2)
		median=${array[mid]}
		#forloop is used to count average of each rows
		for i in $myfile
		do
			count=`expr $count + 1`	
			sum=`expr $sum + $i`
			ave=$((($sum + ($count / 2)) / $count))
		done
		echo -e "$ave\t$median"
		#echo -e "$mid\n"
	done < "${2:-/dev/stdin}"

#argument to calculate columns number, begin with -c argument
elif [[ $1 == -c* ]];
then
	#read line
	#echo "under construction"
	#create tempfile to hold the contents of the file that the system read
	tempfile=""
	while read line
	do
		tempfile+=$line
		tempfile+=$'\n'
	done < "${2:-dev/stdin}"
	
	#get the first line of the file
	first_arr=($(printf "%s\n" "$tempfile" | head -1))
	#get the length of the first line
	len_arr=${#first_arr[@]}

	aver=()
	med=()
	#success=0
	#fail=1
	#check if the file is empty
	if [[ $len_arr == 0 ]];
	then
		echo Averages:
		echo -e "\n"
		echo Medians:
		echo -e "\n"
		exit $success
	fi
		#echo "$line_len"
	#forloop for calculate median and averages
	#specify range from 1 until the end of the length first line
	for i in $(seq 1 $len_arr)
	do
			#grab a number from the input file
			#translate from column into rows and sort it
			numb=$(printf "%s\n" "$tempfile" | cut -f $i | sort -n | tr '\n' ' ')
			new_arr=($numb)
			ctr=$(expr ${#new_arr[@]} / 2)
			mean=${new_arr[$ctr]}
			means+=($mean)
			#variable to calculate the sum of the number
			sum=$(echo $numb | sed 's/ / + /g')
			round_function=$(expr \( ${#new_arr[@]} \) / 2 )
			#calculate the average
			ave=$(expr \( $sum + $round_function \) / ${#new_arr[@]})
			average+=($ave)
			
	done
	#done < "${2:-/dev/stdin}"
	
	#echo -e "X:\n$tempfile"
	#echo "mean: $mean"
	#echo "total column: $len_arr "
	#echo "mid: $ctr"
	#echo "sum: $sum"
	#print the average and median as we need
	echo Averages:
	echo -e "${average[@]}"
	echo Median:
	echo -e "${means[@]}"
	#file=$1
	#echo
	
	#numrows=1
	#while read -r -a array
	#do
	#	((numrows++))
	#	for i in "${array[@]}"
	#	do
	#		column[i]+="$array[i]"$'\n'
	#	done
	#done < $file

	#midrow=$((1+numrows/2))
	#echo "$midrow"

	#result=''
	#for i in "${!column[@]}"
	#do
	#	median=$(sort -n <<<"${column[i]}" | head -n "$midrow" | tail -n 1)
	#	result+="$median "
	#done <$1

	#echo "Average: "
	#echo "still under construction"
	#echo "Median: $result"
else
	#call error function above such as usage that should we use on the requirement
	#exits failure
	error
	exit $fail
fi

clean (){
	rm -f "tmp_file_$$"
	exit 0
}

trap clean TERM HUP INT

echo 'screw up' > "tmp_file_$$"
rm "tmp_file_$$"

#read File

#while read num
#do
#	sum=0
#	count=0
#	ave=0
#	for i in $num
#	do
#		sum=$(($sum + $i))
#		#count=$((count + 1))
#		#ave=$((($sum + ($count / 2)) / $count))
#	done
#	echo "$sum"
#	echo "$num Sum: $sum  average: $ave"
#done < $File
